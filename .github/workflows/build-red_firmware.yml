on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Update
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get -y upgrade
      - name: Install dependencies
        run: sudo apt-get install -y libc6:i386 libgconf-2-4 libgtk-3-0 libncurses5 libpython2.7 libtinfo5 libusb-0.1-4
      - name: Cache CCS
        uses: actions/cache@v2
        id: cache
        with:
          key: ccs1100
          path: ~/ti/ccs1100
      - name: Install CCS
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget --no-verbose https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-J1VdearkvK/12.1.0/CCS12.1.0.00007_linux-x64.tar.gz
          tar xf CCS12.1.0.00007_linux-x64.tar.gz
          CCS12.1.0.00007_linux-x64/ccs_setup_12.1.0.00007.run --mode unattended --prefix ~/ti/ccs1210 --enable-components PF_C28,PF_TM4C
      - name: Checkout
        uses: actions/checkout@v2
      # https://software-dl.ti.com/ccs/esd/documents/ccs_projects-command-line.html
      - name: Import
        run: ~/ti/ccs1210/ccs/eclipse/eclipse -noSplash -data workspace_v12 -application com.ti.ccstudio.apps.projectImport -ccs.location ${{ github.workspace }}/firmware/
      - name: Build
        run: ~/ti/ccs1210/ccs/eclipse/eclipse -noSplash -data workspace_v12 -application com.ti.ccstudio.apps.projectBuild -ccs.projects red_firmware -ccs.configuration Release
      - name: Package
        run: cp firmware/Release/red_firmware.out lenlab_flash/red_firmware.out
      - name: Create archive
        run: (cd lenlab_flash && zip -r ../lenlab_flash-win.zip *)
      - name: Archive production artifact
        uses: actions/upload-artifact@v2
        with:
          name: red_firmware
          path: |
            firmware/Release/red_firmware.out
            lenlab_flash-win.zip
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Download production artifact
        uses: actions/download-artifact@v2
        with:
          name: red_firmware
      - name: get_version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Rename firmware
        run: cp firmware/Release/red_firmware.out lenlab_firmware-${{ steps.get_version.outputs.VERSION }}.out
      - name: Rename flash package
        run: cp lenlab_flash-win.zip lenlab_flash-${{ steps.get_version.outputs.VERSION }}-win.zip
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            lenlab_firmware-${{ steps.get_version.outputs.VERSION }}.out
            lenlab_flash-${{ steps.get_version.outputs.VERSION }}-win.zip
